Invariant testing in Foundry is like playing with a toy in a weird way to see if it breaks.

You have a toy (your smart contract).
The toy has certain rules to follow (like some parts can't come off).
You mess with the toy in strange ways (call functions randomly) to see if it breaks the rules (violates the invariants).

This way, you find if the toy (contract) can handle unexpected situations and isn't easily broken.


// - target contract

 targetContract(address(handler)); // Test all public function of handler Contract.


 // - target selector

  bytes4 [] memory selectors = new bytes4[](3);
        selectors[0] = handler.sendToFallback.selector;
        selectors[1] = handler.deposit.selector;
        selectors[2] = handler.withdraw.selector;
        // selectors[3] = handler.fail.selector;

        targetSelector(
            FuzzSelector({addr: address(handler), selectors: selectors})
        );